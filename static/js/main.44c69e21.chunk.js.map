{"version":3,"sources":["theme.js","components/Header.js","components/Key.js","lib/DtmfTone.js","constants/frequencies.js","constants/keys.js","components/Keypad.js","components/AxisKeys.js","components/AudioPanel.js","App.js","serviceWorker.js","index.js"],"names":["createMuiTheme","props","AppBar","position","Toolbar","variant","Typography","color","useState","isKeyPressed","setIsKeyPressed","mouseEventHandler","e","isMouseDownEvent","type","eventHandler","keyClass","classnames","className","onMouseDown","onMouseUp","onMouseOut","children","Tone","global","TONE_SILENCE_LOGGING","tones","startTone","frequencies","forEach","frequency","tone","Oscillator","toMaster","start","push","stopTone","stop","length","high","low","keys","labels","row","column","label","id","generateKeys","map","key","Key","isX","axis","frequencyGroup","AxisKeys","Keypad","useStyles","makeStyles","theme","container","marginTop","spacing","paper","padding","App","classes","CssBaseline","ThemeProvider","Header","Container","Paper","AudioPanel","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"0NAEeA,cAAe,I,wBCCf,WAAAC,GACb,OACE,kBAACC,EAAA,EAAD,CAAQC,SAAS,UACf,kBAACC,EAAA,EAAD,CAASC,QAAQ,SACf,kBAACC,EAAA,EAAD,CAAYD,QAAQ,KAAKE,MAAM,WAA/B,0C,yBCJO,WAAAN,GAAU,IAAD,EACkBO,oBAAS,GAD3B,mBACfC,EADe,KACDC,EADC,KAGhBC,EAAoB,SAAAC,GACxB,IAAMC,EAA8B,cAAXD,EAAEE,KAC3BJ,EAAgBG,IAGhBE,EADqBd,EADHY,EAAmB,cAAgB,iBAKjDG,EAAWC,IAAW,MAAO,CAAE,WAAYR,IAEjD,OACE,4BACES,UAAWF,EACXG,YAAaR,EACbS,UAAWT,EACXU,WAAYV,GAEXV,EAAMqB,W,iBCrBbC,IAAKC,OAAOC,sBAAuB,EAEnC,IAAMC,EAAQ,GAERC,EAAY,SAAAC,GAChBA,EAAYC,SAAQ,SAAAC,GAClB,IAAMC,EAAO,IAAIR,IAAKS,WAAWF,EAAW,QAAQG,WACpDF,EAAKG,QACLR,EAAMS,KAAKJ,OAITK,EAAW,WACfV,EAAMG,SAAQ,SAAAE,GAAI,OAAIA,EAAKM,UAC3BX,EAAMY,OAAS,GChBF,GACbC,KAAM,CAAC,KAAM,KAAM,KAAM,MACzBC,IAAK,CAAC,IAAK,IAAK,IAAK,MC6BRC,EA7BM,WAUnB,IATA,IAAMC,EAAS,CACb,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,MAGdD,EAAO,GAEFE,EAAM,EAAGA,EAAMD,EAAOJ,OAAQK,IACrC,IAAK,IAAIC,EAAS,EAAGA,EAASF,EAAOC,GAAKL,OAAQM,IAAU,CAC1D,IAAMC,EAAQH,EAAOC,GAAKC,GAC1BH,EAAKN,KAAK,CACRW,GAAG,OAAD,OAASH,EAAT,YAAgBC,GAClBC,QACAjB,YAAa,CACXW,KAAMX,EAAYW,KAAKK,GACvBJ,IAAKZ,EAAYY,IAAIG,MAM7B,OAAOF,EAGIM,GCvBE,G,MAAA,WACb,OACE,yBAAK7B,UAAU,UACZuB,EAAKO,KAAI,SAAAC,GACR,IAAMrB,EAAc,CAACqB,EAAIrB,YAAYW,KAAMU,EAAIrB,YAAYY,KAE3D,OACE,kBAACU,EAAD,CACED,IAAKA,EAAIH,GACT3B,YAAa,kBAAMQ,EAAUC,IAC7BR,UAAW,kBAAMgB,MAEhBa,EAAIJ,aCbF,WAAA5C,GACb,IAAMkD,EAAqB,MAAflD,EAAMmD,KACZC,EAAiBF,EAAMvB,EAAYW,KAAOX,EAAYY,IAE5D,OACE,yBAAKtB,UAAS,yBAAoBiC,EAAM,IAAM,MAC3CE,EAAeL,KAAI,SAAAlB,GAClB,OACE,kBAACoB,EAAD,CACED,IAAG,kBAAanB,GAChBX,YAAa,kBAAMQ,EAAU,CAACG,KAC9BV,UAAW,kBAAMgB,MAEhBN,EALH,WCTK,WAAA7B,GACb,OACE,yBAAKiB,UAAU,eACb,kBAACoC,EAAD,CAAUF,KAAK,MACf,kBAACE,EAAD,CAAUF,KAAK,MACf,kBAACG,EAAD,Q,wBCDAC,EAAYC,aAAW,SAAAC,GAAK,MAAK,CACrCC,UAAW,CACTC,UAAWF,EAAMG,QAAQ,IAE3BC,MAAO,CACLC,QAASL,EAAMG,QAAQ,QAsBZG,MAlBf,SAAa/D,GACX,IAAMgE,EAAUT,EAAUvD,GAE1B,OACE,oCACE,kBAACiE,EAAA,EAAD,MACA,kBAACC,EAAA,EAAD,CAAeT,MAAOA,GACpB,kBAACU,EAAD,MACA,kBAACC,EAAA,EAAD,CAAWnD,UAAW+C,EAAQN,WAC5B,kBAACW,EAAA,EAAD,CAAOpD,UAAW+C,EAAQH,OACxB,kBAACS,EAAD,WCfQC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SD0HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.44c69e21.chunk.js","sourcesContent":["import { createMuiTheme } from '@material-ui/core/styles';\n\nexport default createMuiTheme({\n    \n});\n","import React from \"react\";\nimport { AppBar, Toolbar, Typography } from \"@material-ui/core\";\n\nexport default props => {\n  return (\n    <AppBar position=\"static\">\n      <Toolbar variant=\"dense\">\n        <Typography variant=\"h6\" color=\"inherit\">\n          Dual-tone multi-frequency signaling\n        </Typography>\n      </Toolbar>\n    </AppBar>\n  );\n};\n","import React, { useState } from \"react\";\nimport classnames from \"classnames\";\n\nexport default props => {\n  const [isKeyPressed, setIsKeyPressed] = useState(false);\n\n  const mouseEventHandler = e => {\n    const isMouseDownEvent = e.type === \"mousedown\";\n    setIsKeyPressed(isMouseDownEvent);\n    const eventType = isMouseDownEvent ? \"onMouseDown\" : \"onMouseUp\";\n    const eventHandler = props[eventType];\n    eventHandler();\n  };\n\n  const keyClass = classnames(\"key\", { \"key-down\": isKeyPressed });\n\n  return (\n    <button\n      className={keyClass}\n      onMouseDown={mouseEventHandler}\n      onMouseUp={mouseEventHandler}\n      onMouseOut={mouseEventHandler}\n    >\n      {props.children}\n    </button>\n  );\n};\n","import Tone from \"tone\";\n\nTone.global.TONE_SILENCE_LOGGING = true;\n\nconst tones = [];\n\nconst startTone = frequencies => {\n  frequencies.forEach(frequency => {\n    const tone = new Tone.Oscillator(frequency, \"sine\").toMaster();\n    tone.start();\n    tones.push(tone);\n  });\n};\n\nconst stopTone = () => {\n  tones.forEach(tone => tone.stop());\n  tones.length = 0;\n};\n\nexport { startTone, stopTone };\n\nexport default {\n  startTone,\n  stopTone\n};\n","export default {\n  high: [1209, 1336, 1477, 1633],\n  low: [697, 770, 852, 941]\n};\n","import frequencies from \"./frequencies\";\n\nconst generateKeys = () => {\n  const labels = [\n    [\"1\", \"2\", \"3\", \"A\"],\n    [\"4\", \"5\", \"6\", \"B\"],\n    [\"7\", \"8\", \"9\", \"C\"],\n    [\"*\", \"0\", \"#\", \"D\"]\n  ];\n\n  let keys = [];\n\n  for (let row = 0; row < labels.length; row++) {\n    for (let column = 0; column < labels[row].length; column++) {\n      const label = labels[row][column];\n      keys.push({\n        id: `key-${row}-${column}`,\n        label,\n        frequencies: {\n          high: frequencies.high[column],\n          low: frequencies.low[row]\n        }\n      });\n    }\n  }\n\n  return keys;\n};\n\nconst keys = generateKeys();\n\nexport default keys;\n","import React from \"react\";\nimport Key from \"./Key\";\nimport { startTone, stopTone } from \"../lib/DtmfTone\";\nimport keys from \"../constants/keys\";\nimport \"./keypad.css\";\n\nexport default () => {\n  return (\n    <div className=\"keypad\">\n      {keys.map(key => {\n        const frequencies = [key.frequencies.high, key.frequencies.low];\n\n        return (\n          <Key\n            key={key.id}\n            onMouseDown={() => startTone(frequencies)}\n            onMouseUp={() => stopTone()}\n          >\n            {key.label}\n          </Key>\n        );\n      })}\n    </div>\n  );\n};\n","import React from \"react\";\nimport Key from \"./Key\";\nimport frequencies from \"../constants/frequencies\";\nimport { startTone, stopTone } from \"../lib/DtmfTone\";\n\nexport default props => {\n  const isX = props.axis === \"x\";\n  const frequencyGroup = isX ? frequencies.high : frequencies.low;\n\n  return (\n    <div className={`axis-keys axis-${isX ? \"x\" : \"y\"}`}>\n      {frequencyGroup.map(frequency => {\n        return (\n          <Key\n            key={`axisKey-${frequency}`}\n            onMouseDown={() => startTone([frequency])}\n            onMouseUp={() => stopTone()}\n          >\n            {frequency}Hz\n          </Key>\n        );\n      })}\n    </div>\n  );\n};\n","import React from \"react\";\nimport Keypad from \"./Keypad\";\nimport AxisKeys from \"./AxisKeys\";\n\nexport default props => {\n  return (\n    <div className=\"audio-panel\">\n      <AxisKeys axis=\"x\" />\n      <AxisKeys axis=\"y\" />\n      <Keypad />\n    </div>\n  );\n};\n","import React from \"react\";\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport theme from \"./theme\";\nimport Header from \"./components/Header\";\nimport AudioPanel from \"./components/AudioPanel\";\nimport { Container, ThemeProvider, Paper } from \"@material-ui/core\";\n\nconst useStyles = makeStyles(theme => ({\n  container: {\n    marginTop: theme.spacing(2)\n  },\n  paper: {\n    padding: theme.spacing(2)\n  }\n}));\n\nfunction App(props) {\n  const classes = useStyles(props);\n\n  return (\n    <>\n      <CssBaseline />\n      <ThemeProvider theme={theme}>\n        <Header />\n        <Container className={classes.container}>\n          <Paper className={classes.paper}>\n            <AudioPanel />\n          </Paper>\n        </Container>\n      </ThemeProvider>\n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}